
GccBoardProject2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000282  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000282  00000316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080006a  0080006a  00000320  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000078c  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000620  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000546  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  000016a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007042  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d7  00000000  00000000  0000873a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00008911  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000023a  00000000  00000000  00008941  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	43 c0       	rjmp	.+134    	; 0x8c <__vector_1>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e8       	ldi	r30, 0x82	; 130
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	1c d0       	rcall	.+56     	; 0xc0 <main>
  88:	fa c0       	rjmp	.+500    	; 0x27e <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <__vector_1>:
volatile int contadord = 0;
volatile int contadorc = 0;
volatile int contadorm = 0;

// Función de servicio de interrupción para INT0 (PD2)
ISR(INT0_vect) {
  8c:	1f 92       	push	r1
  8e:	0f 92       	push	r0
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	0f 92       	push	r0
  94:	11 24       	eor	r1, r1
	// Reiniciar todos los contadores a 0
	contadoru = 0;
  96:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <contadoru+0x1>
  9a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <contadoru>
	contadord = 0;
  9e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <contadord+0x1>
  a2:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <contadord>
	contadorc = 0;
  a6:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <contadorc+0x1>
  aa:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <contadorc>
	contadorm = 0;
  ae:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x1>
  b2:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
}
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <main>:

int main(void) {
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	2a 97       	sbiw	r28, 0x0a	; 10
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	cd bf       	out	0x3d, r28	; 61
	// Configurar los puertos
	DDRC = 255;
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	84 bb       	out	0x14, r24	; 20
	DDRA = 255;
  d8:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0b00000100;  // PD2 como entrada, PD2 con pull-up
  da:	84 e0       	ldi	r24, 0x04	; 4
  dc:	81 bb       	out	0x11, r24	; 17
	
	char bcd[] = {63, 6, 91, 79, 102, 109, 125, 7, 127, 103};
  de:	8a e0       	ldi	r24, 0x0A	; 10
  e0:	e0 e6       	ldi	r30, 0x60	; 96
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	de 01       	movw	r26, r28
  e6:	11 96       	adiw	r26, 0x01	; 1
  e8:	01 90       	ld	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	8a 95       	dec	r24
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x28>
	
	// Configurar PD2 como entrada con resistencia pull-up
	DDRD &= ~(1 << PD2);  // PD2 como entrada
  f0:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (1 << PD2);  // Activar resistencia pull-up interna en PD2
  f2:	92 9a       	sbi	0x12, 2	; 18
	
	// Configurar interrupción INT0 en flanco de bajada
	MCUCR |= (1 << ISC01);   // Flanco de bajada en INT0
  f4:	85 b7       	in	r24, 0x35	; 53
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
  fa:	85 b7       	in	r24, 0x35	; 53
  fc:	8e 7f       	andi	r24, 0xFE	; 254
  fe:	85 bf       	out	0x35, r24	; 53
	
	// Habilitar interrupción externa INT0
	GICR |= (1 << INT0);
 100:	8b b7       	in	r24, 0x3b	; 59
 102:	80 64       	ori	r24, 0x40	; 64
 104:	8b bf       	out	0x3b, r24	; 59
	
	// Habilitar interrupciones globales
	sei();
 106:	78 94       	sei
	
	while (1) {
		for (int i = 0; i < 5; i++) {
			b_dat = bcd[contadoru];
			b_dir = 0b1110;
 108:	6e e0       	ldi	r22, 0x0E	; 14
			retardo;
			
			b_dat = bcd[contadord];
			b_dir = 0b1101;
 10a:	5d e0       	ldi	r21, 0x0D	; 13
			retardo;
			
			b_dat = bcd[contadorc];
			b_dir = 0b1011;
 10c:	4b e0       	ldi	r20, 0x0B	; 11
			retardo;
			
			b_dat = bcd[contadorm];
			b_dir = 0b0111;
 10e:	37 e0       	ldi	r19, 0x07	; 7
	contadord = 0;
	contadorc = 0;
	contadorm = 0;
}

int main(void) {
 110:	85 e0       	ldi	r24, 0x05	; 5
 112:	90 e0       	ldi	r25, 0x00	; 0
	// Habilitar interrupciones globales
	sei();
	
	while (1) {
		for (int i = 0; i < 5; i++) {
			b_dat = bcd[contadoru];
 114:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <contadoru>
 118:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <contadoru+0x1>
 11c:	a1 e0       	ldi	r26, 0x01	; 1
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	ac 0f       	add	r26, r28
 122:	bd 1f       	adc	r27, r29
 124:	ea 0f       	add	r30, r26
 126:	fb 1f       	adc	r31, r27
 128:	20 81       	ld	r18, Z
 12a:	2b bb       	out	0x1b, r18	; 27
			b_dir = 0b1110;
 12c:	65 bb       	out	0x15, r22	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	bf ef       	ldi	r27, 0xFF	; 255
 130:	e9 ef       	ldi	r30, 0xF9	; 249
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	b1 50       	subi	r27, 0x01	; 1
 136:	e0 40       	sbci	r30, 0x00	; 0
 138:	20 40       	sbci	r18, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x74>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x7e>
 13e:	00 00       	nop
			retardo;
			
			b_dat = bcd[contadord];
 140:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <contadord>
 144:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <contadord+0x1>
 148:	a1 e0       	ldi	r26, 0x01	; 1
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	ac 0f       	add	r26, r28
 14e:	bd 1f       	adc	r27, r29
 150:	ea 0f       	add	r30, r26
 152:	fb 1f       	adc	r31, r27
 154:	20 81       	ld	r18, Z
 156:	2b bb       	out	0x1b, r18	; 27
			b_dir = 0b1101;
 158:	55 bb       	out	0x15, r21	; 21
 15a:	bf ef       	ldi	r27, 0xFF	; 255
 15c:	e9 ef       	ldi	r30, 0xF9	; 249
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	b1 50       	subi	r27, 0x01	; 1
 162:	e0 40       	sbci	r30, 0x00	; 0
 164:	20 40       	sbci	r18, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0xa0>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0xaa>
 16a:	00 00       	nop
			retardo;
			
			b_dat = bcd[contadorc];
 16c:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <contadorc>
 170:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <contadorc+0x1>
 174:	a1 e0       	ldi	r26, 0x01	; 1
 176:	b0 e0       	ldi	r27, 0x00	; 0
 178:	ac 0f       	add	r26, r28
 17a:	bd 1f       	adc	r27, r29
 17c:	ea 0f       	add	r30, r26
 17e:	fb 1f       	adc	r31, r27
 180:	20 81       	ld	r18, Z
 182:	2b bb       	out	0x1b, r18	; 27
			b_dir = 0b1011;
 184:	45 bb       	out	0x15, r20	; 21
 186:	bf ef       	ldi	r27, 0xFF	; 255
 188:	e9 ef       	ldi	r30, 0xF9	; 249
 18a:	20 e0       	ldi	r18, 0x00	; 0
 18c:	b1 50       	subi	r27, 0x01	; 1
 18e:	e0 40       	sbci	r30, 0x00	; 0
 190:	20 40       	sbci	r18, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <main+0xcc>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0xd6>
 196:	00 00       	nop
			retardo;
			
			b_dat = bcd[contadorm];
 198:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
 19c:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <__data_end+0x1>
 1a0:	a1 e0       	ldi	r26, 0x01	; 1
 1a2:	b0 e0       	ldi	r27, 0x00	; 0
 1a4:	ac 0f       	add	r26, r28
 1a6:	bd 1f       	adc	r27, r29
 1a8:	ea 0f       	add	r30, r26
 1aa:	fb 1f       	adc	r31, r27
 1ac:	20 81       	ld	r18, Z
 1ae:	2b bb       	out	0x1b, r18	; 27
			b_dir = 0b0111;
 1b0:	35 bb       	out	0x15, r19	; 21
 1b2:	bf ef       	ldi	r27, 0xFF	; 255
 1b4:	e9 ef       	ldi	r30, 0xF9	; 249
 1b6:	20 e0       	ldi	r18, 0x00	; 0
 1b8:	b1 50       	subi	r27, 0x01	; 1
 1ba:	e0 40       	sbci	r30, 0x00	; 0
 1bc:	20 40       	sbci	r18, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0xf8>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x102>
 1c2:	00 00       	nop
 1c4:	01 97       	sbiw	r24, 0x01	; 1
	
	// Habilitar interrupciones globales
	sei();
	
	while (1) {
		for (int i = 0; i < 5; i++) {
 1c6:	09 f0       	breq	.+2      	; 0x1ca <main+0x10a>
 1c8:	a5 cf       	rjmp	.-182    	; 0x114 <main+0x54>
			b_dat = bcd[contadorm];
			b_dir = 0b0111;
			retardo;
		}
		
		contadoru++;
 1ca:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <contadoru>
 1ce:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <contadoru+0x1>
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <contadoru+0x1>
 1d8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <contadoru>
		if (contadoru == 10) {
 1dc:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <contadoru>
 1e0:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <contadoru+0x1>
 1e4:	0a 97       	sbiw	r24, 0x0a	; 10
 1e6:	69 f4       	brne	.+26     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
			contadoru = 0;
 1e8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <contadoru+0x1>
 1ec:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <contadoru>
			contadord++;
 1f0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <contadord>
 1f4:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <contadord+0x1>
 1f8:	01 96       	adiw	r24, 0x01	; 1
 1fa:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <contadord+0x1>
 1fe:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <contadord>
		}
		if (contadord == 10) {
 202:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <contadord>
 206:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <contadord+0x1>
 20a:	0a 97       	sbiw	r24, 0x0a	; 10
 20c:	69 f4       	brne	.+26     	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
			contadord = 0;
 20e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <contadord+0x1>
 212:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <contadord>
			contadorc++;
 216:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <contadorc>
 21a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <contadorc+0x1>
 21e:	01 96       	adiw	r24, 0x01	; 1
 220:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <contadorc+0x1>
 224:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <contadorc>
		}
		if (contadorc == 10) {
 228:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <contadorc>
 22c:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <contadorc+0x1>
 230:	0a 97       	sbiw	r24, 0x0a	; 10
 232:	69 f4       	brne	.+26     	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
			contadorc = 0;
 234:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <contadorc+0x1>
 238:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <contadorc>
			contadorm++;
 23c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 240:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x1>
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 24a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
		}
		if (contadorm == 10) {
 24e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 252:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x1>
 256:	0a 97       	sbiw	r24, 0x0a	; 10
 258:	09 f0       	breq	.+2      	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
 25a:	5a cf       	rjmp	.-332    	; 0x110 <main+0x50>
			contadorm = 0;
 25c:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x1>
 260:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
			contadorc = 0;
 264:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <contadorc+0x1>
 268:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <contadorc>
			contadord = 0;
 26c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <contadord+0x1>
 270:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <contadord>
			contadoru = 0;
 274:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <contadoru+0x1>
 278:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <contadoru>
 27c:	49 cf       	rjmp	.-366    	; 0x110 <main+0x50>

0000027e <_exit>:
 27e:	f8 94       	cli

00000280 <__stop_program>:
 280:	ff cf       	rjmp	.-2      	; 0x280 <__stop_program>
