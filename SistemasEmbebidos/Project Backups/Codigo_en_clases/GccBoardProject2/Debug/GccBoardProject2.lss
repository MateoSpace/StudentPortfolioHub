
GccBoardProject2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005d2  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000558  00000000  00000000  00000756  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ad  00000000  00000000  00000cae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000105c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000683f  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000078bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00000088  00000000  00000000  000078cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	02 d0       	rcall	.+4      	; 0x66 <main>
  62:	1e c0       	rjmp	.+60     	; 0xa0 <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <main>:

#include <avr/io.h>

int main(void) {
	// Configurar PA0, PA2, PA4, PA6 como salidas y PA1, PA3, PA5, PA7 como entradas
	DDRA = (1 << PA0) | (1 << PA2) | (1 << PA4) | (1 << PA6);  // PA0, PA2, PA4, PA6 salidas
  66:	85 e5       	ldi	r24, 0x55	; 85
  68:	8a bb       	out	0x1a, r24	; 26
	PORTA |= ~DDRA;  // Habilitar pull-ups en los pines de entrada (PA1, PA3, PA5, PA7)
  6a:	9a b3       	in	r25, 0x1a	; 26
  6c:	8b b3       	in	r24, 0x1b	; 27
  6e:	90 95       	com	r25
  70:	89 2b       	or	r24, r25
  72:	8b bb       	out	0x1b, r24	; 27

	while (1) {
		uint8_t input = PINA;  // Leer todas las entradas
  74:	89 b3       	in	r24, 0x19	; 25
		
		// Controlar las salidas según las entradas
		if (input & (1 << PA5)) PORTA &= ~(1 << PA0);  // Si PA5 está en alto, limpiar PA0
  76:	85 ff       	sbrs	r24, 5
  78:	02 c0       	rjmp	.+4      	; 0x7e <main+0x18>
  7a:	d8 98       	cbi	0x1b, 0	; 27
  7c:	01 c0       	rjmp	.+2      	; 0x80 <main+0x1a>
		else PORTA |= (1 << PA0);                      // Si PA5 está en bajo, poner PA0 en alto
  7e:	d8 9a       	sbi	0x1b, 0	; 27

		if (input & (1 << PA6)) PORTA &= ~(1 << PA1);  // Si PA6 está en alto, limpiar PA1
  80:	86 ff       	sbrs	r24, 6
  82:	02 c0       	rjmp	.+4      	; 0x88 <main+0x22>
  84:	d9 98       	cbi	0x1b, 1	; 27
  86:	01 c0       	rjmp	.+2      	; 0x8a <main+0x24>
		else PORTA |= (1 << PA1);                      // Si PA6 está en bajo, poner PA1 en alto
  88:	d9 9a       	sbi	0x1b, 1	; 27

		if (input & (1 << PA7)) PORTA &= ~(1 << PA2);  // Si PA7 está en alto, limpiar PA2
  8a:	88 23       	and	r24, r24
  8c:	14 f4       	brge	.+4      	; 0x92 <main+0x2c>
  8e:	da 98       	cbi	0x1b, 2	; 27
  90:	01 c0       	rjmp	.+2      	; 0x94 <main+0x2e>
		else PORTA |= (1 << PA2);                      // Si PA7 está en bajo, poner PA2 en alto
  92:	da 9a       	sbi	0x1b, 2	; 27

		if (input & (1 << PA4)) PORTA &= ~(1 << PA3);  // Si PA4 está en alto, limpiar PA3
  94:	84 ff       	sbrs	r24, 4
  96:	02 c0       	rjmp	.+4      	; 0x9c <main+0x36>
  98:	db 98       	cbi	0x1b, 3	; 27
  9a:	ec cf       	rjmp	.-40     	; 0x74 <main+0xe>
		else PORTA |= (1 << PA3);                      // Si PA4 está en bajo, poner PA3 en alto
  9c:	db 9a       	sbi	0x1b, 3	; 27
  9e:	ea cf       	rjmp	.-44     	; 0x74 <main+0xe>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>
